name: Build and Test Wi-Fi Opus Audio Demo

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  set-version:
    runs-on: ubuntu-24.04
    outputs:
      NCS_VERSION: ${{ steps.extract-version.outputs.NCS_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: app-workspace/nordic_wifi_opus_audio_demo

      - name: Extract NCS version from west.yml
        id: extract-version
        working-directory: app-workspace/nordic_wifi_opus_audio_demo
        run: |
          NCS_VERSION=$(grep 'revision:' west.yml | awk '{print $2}')
          echo "NCS_VERSION=${NCS_VERSION}" >> $GITHUB_OUTPUT

  build-and-test-in-docker:
    needs: set-version
    runs-on: ubuntu-24.04
    container: ghcr.io/nrfconnect/sdk-nrf-toolchain:${{ needs.set-version.outputs.NCS_VERSION }}
    defaults:
      run:
        # Bash shell is needed to set toolchain related environment variables in docker container
        # It is a workaround for GitHub Actions limitation https://github.com/actions/runner/issues/1964
        shell: bash
    strategy:
      matrix:
        config:
          # Wi-Fi Opus Audio Gateway and Headset builds
          - name: "Wi-Fi Opus Audio Gateway USB"
            build_dir: "build_opus_gateway_usb"
            overlay: "overlay-opus.conf;overlay-audio-gateway.conf"
            description: "Wi-Fi Opus Audio Gateway device with USB audio source"
          - name: "Wi-Fi Opus Audio Gateway LINE IN"
            build_dir: "build_opus_gateway_linein"
            overlay: "overlay-opus.conf;overlay-audio-gateway.conf;overlay-line-in.conf"
            description: "Wi-Fi Opus Audio Gateway device with LINE IN audio source"
          - name: "Wi-Fi Opus Audio Headset"
            build_dir: "build_opus_headset"
            overlay: "overlay-opus.conf;overlay-audio-headset.conf"
            description: "Wi-Fi Opus Audio Headset device"
    steps:
      - name: Checkout nordic wifi opus audio demo repository
        uses: actions/checkout@v4
        with:
          path: app-workspace/nordic_wifi_opus_audio_demo

      - name: Prepare west project
        working-directory: app-workspace
        run: |
          west init -l nordic_wifi_opus_audio_demo
          west update -o=--depth=1 -n

      - name: Initialize Opus submodule
        working-directory: app-workspace/nordic_wifi_opus_audio_demo
        run: |
          # Initialize and update opus submodule if it exists
          if [ -f .gitmodules ]; then
            git submodule update --init --recursive
            if [ -d "wifi_audio/src/audio/opus" ]; then
              cd wifi_audio/src/audio/opus
              git checkout v1.5.2
            fi
          fi

      - name: Build ${{ matrix.config.name }}
        working-directory: app-workspace/nordic_wifi_opus_audio_demo
        run: |
          west build -p -b nrf5340_audio_dk/nrf5340/cpuapp -d ${{ matrix.config.build_dir }} -- -DSHIELD="nrf7002ek" -DEXTRA_CONF_FILE="${{ matrix.config.overlay }}"

      - name: Upload build artifacts for ${{ matrix.config.name }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-${{ matrix.config.name }}
          path: |
            app-workspace/nordic_wifi_opus_audio_demo/${{ matrix.config.build_dir }}/merged.hex

  validate-documentation:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: app-workspace/nordic_wifi_opus_audio_demo
        
      - name: Validate README structure
        working-directory: app-workspace/nordic_wifi_opus_audio_demo
        run: |
          # Check if README has required sections
          echo "Validating README.md structure..."
          
          # Required sections for Wi-Fi Opus Audio Demo
          grep -q "Overview" README.md || (echo "Missing Overview section" && exit 1)
          grep -q "Key Features" README.md || (echo "Missing Key Features section" && exit 1)
          grep -q "Hardware Requirements" README.md || (echo "Missing Hardware Requirements section" && exit 1)
          grep -q "Quick Start Guide" README.md || (echo "Missing Quick Start Guide section" && exit 1)
          grep -q "Building" README.md || (echo "Missing Building section" && exit 1)
          grep -q "Opus Codec Configuration" README.md || (echo "Missing Opus Codec Configuration section" && exit 1)
          
          echo "README.md validation passed ✓"

      - name: Validate configuration files exist
        working-directory: app-workspace/nordic_wifi_opus_audio_demo
        run: |
          echo "Checking overlay configuration files..."
          
          # Audio configurations
          [ -f overlay-audio-gateway.conf ] || (echo "Missing overlay-audio-gateway.conf" && exit 1)
          [ -f overlay-audio-headset.conf ] || (echo "Missing overlay-audio-headset.conf" && exit 1)
          [ -f overlay-opus.conf ] || (echo "Missing overlay-opus.conf" && exit 1)
          
          # Base configuration
          [ -f prj.conf ] || (echo "Missing prj.conf" && exit 1)
          
          # West configuration
          [ -f west.yml ] || (echo "Missing west.yml" && exit 1)
          
          # CMakeLists
          [ -f CMakeLists.txt ] || (echo "Missing CMakeLists.txt" && exit 1)
          
          echo "Configuration files validation passed ✓"

  static-analysis:
    needs: set-version
    runs-on: ubuntu-24.04
    container: ghcr.io/nrfconnect/sdk-nrf-toolchain:${{ needs.set-version.outputs.NCS_VERSION }}
    defaults:
      run:
        # Bash shell is needed to set toolchain related environment variables in docker container
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: app-workspace/nordic_wifi_opus_audio_demo
        
      - name: Prepare west project for style checks
        working-directory: app-workspace
        run: |
          west init -l nordic_wifi_opus_audio_demo
          west update -o=--depth=1 -n
          
      - name: Run Zephyr checkpatch
        working-directory: app-workspace
        run: |
          echo "Running Zephyr checkpatch on source files..."
          
          # Check if we have any commits to validate
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            # Run checkpatch on the diff between HEAD and previous commit
            cd nordic_wifi_opus_audio_demo && git diff HEAD~1 | ../zephyr/scripts/checkpatch.pl --no-tree -
          else
            # For initial commit or single commit, check all source files
            echo "Single commit detected, checking all source files..."
            if [ -d nordic_wifi_opus_audio_demo/src/ ]; then
              for file in $(find nordic_wifi_opus_audio_demo/src/ -name "*.c" -o -name "*.h"); do
                if [ -f "$file" ]; then
                  echo "Checking $file..."
                  ./zephyr/scripts/checkpatch.pl --no-tree --file "$file" || true
                fi
              done
            fi
          fi
          
          echo "Checkpatch analysis completed ✓"
          
      - name: Check code formatting with Zephyr style
        working-directory: app-workspace
        run: |
          echo "Checking code formatting with Zephyr .clang-format..."
          
          # Use Zephyr's .clang-format configuration
          if [ -f zephyr/.clang-format ]; then
            cp zephyr/.clang-format nordic_wifi_opus_audio_demo/.clang-format
          else
            echo "Warning: Zephyr .clang-format not found, using project default"
          fi
          
          # Find C and H files
          if [ -d nordic_wifi_opus_audio_demo/src/ ]; then
            c_files=$(find nordic_wifi_opus_audio_demo/src/ -name "*.c" -o -name "*.h")
            
            if [ -n "$c_files" ]; then
              echo "Found files to check:"
              echo "$c_files"
              
              # Check formatting (dry-run mode)
              format_issues=0
              for file in $c_files; do
                if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
                  echo "❌ Formatting issues found in: $file"
                  clang-format --dry-run "$file" | head -20
                  format_issues=$((format_issues + 1))
                else
                  echo "✓ $file"
                fi
              done
              
              if [ $format_issues -gt 0 ]; then
                echo ""
                echo "❌ Found formatting issues in $format_issues file(s)"
                echo "Run 'clang-format -i <file>' to fix formatting issues"
                exit 1
              fi
              
              echo "Code formatting check passed ✓"
            else
              echo "No C/H files found to check"
            fi
          else
            echo "No src/ directory found"
          fi

  create-release:
    needs: [set-version, build-and-test-in-docker, validate-documentation, static-analysis]
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: find artifacts -type f -name "*.hex"

      - name: Create release package
        run: |
          mkdir -p release-package
          
          # Copy and rename hex files with configuration names
          for config_dir in artifacts/build-*; do
            config_name=$(basename "$config_dir" | sed 's/build-//' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
            if [ -f "$config_dir/merged.hex" ]; then
              cp "$config_dir/merged.hex" "release-package/nordic-wifi-opus-audio-demo-${config_name}-${GITHUB_REF_NAME}.hex"
            fi
          done
          
          # Create a zip archive with all firmware files
          cd release-package
          zip -r "../nordic-wifi-opus-audio-demo-firmware-${GITHUB_REF_NAME}.zip" .
          cd ..
          
          # List created files
          ls -la release-package/
          ls -la nordic-wifi-opus-audio-demo-firmware-*.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Nordic Wi-Fi Opus Audio Demo ${{ github.ref_name }}"
          body: |
            ## Nordic Wi-Fi Opus Audio Demo Firmware Release ${{ github.ref_name }}
            
            > **Note**: This release tag (${{ github.ref_name }}) corresponds to the NCS version (${{ needs.set-version.outputs.NCS_VERSION }}) used for building the firmware.
            
            This release contains pre-compiled firmware for Wi-Fi Opus Audio Demo configurations:
            
            ### Firmware Configurations Included:
            - **Wi-Fi Opus Audio Gateway USB** - Audio gateway device with USB audio input and Opus codec support
            - **Wi-Fi Opus Audio Gateway LINE IN** - Audio gateway device with LINE IN audio input and Opus codec support
            - **Wi-Fi Opus Audio Headset** - Audio headset device with Opus codec support
            
            ### Files:
            - Individual `.hex` files for each configuration
            - Complete firmware package: `nordic-wifi-opus-audio-demo-firmware-${{ github.ref_name }}.zip`
            
            ### Hardware Support:
            - **Target Board**: nRF5340 Audio DK (nrf5340_audio_dk/nrf5340/cpuapp)
            - **Wi-Fi Shield**: nRF7002EK
            - **NCS Version**: ${{ needs.set-version.outputs.NCS_VERSION }}
            - **Opus Version**: v1.5.2
            
            ### Usage:
            1. Download the appropriate `.hex` file for your device role (Gateway or Headset)
            2. Flash to nRF5340 Audio DK using `west flash` or nRF Connect Programmer
            3. Connect nRF7002EK as shield to nRF5340 Audio DK
            4. Refer to [README.md](README.md) for configuration and operation details
            
            ### Quick Start:
            - Flash Gateway firmware to one nRF5340 Audio DK
            - Flash Headset firmware to another nRF5340 Audio DK
            - Configure Wi-Fi credentials and start audio streaming
            
            Built with NCS ${{ needs.set-version.outputs.NCS_VERSION }}
          files: |
            release-package/*.hex
            nordic-wifi-opus-audio-demo-firmware-*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
